#include "physic.h"

physic::physic( graphic *graphic, float skiptime) {
    p_world = new q3Scene( 1.0 / 60.0 );
    p_timer.start( graphic);

    p_last_time = 0;

    p_fps_skipTime = skiptime;

    //p_world->SetGravity( q3Vec3( 0, -10, 0) );
    q3BodyDef bodyDef;
        body = p_world->CreateBody( bodyDef );
    q3BoxDef boxDef; // See q3Box.h for settings details
        q3Transform localSpace; // Contains position and orientation, see q3Transform.h for details
        q3Identity( localSpace ); // Specify the origin, and identity orientation

        // Create a box at the origin with width, height, depth = (1.0, 1.0, 1.0)
        // and add it to a rigid body. The transform is defined relative to the owning body
        boxDef.Set( localSpace, q3Vec3( 1.0, 1.0, 1.0 ) );
        body->AddBox( boxDef );
}

physic::~physic() {
}


void physic::process( graphic *graphic) {
    float l_current = p_timer.getTicks( graphic);

    if ( l_current - p_last_time > p_fps_skipTime) {
        p_last_time = l_current;

        float l_delta_time = l_current - p_last_time;

        p_world->Step();

        printf( "%.2f 2\n", body->GetTransform().position.y);
    }
}
